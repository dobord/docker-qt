name: Build and Push Docker Image
on:
    push:
        branches:
          - '*'
          - '!develop'
        tags:
          - '*'
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
          fail-fast: false
          matrix:
            target-os: [linux, android, wasm]
            qt-version: [6.8]

        steps:

          - name: Check disk space
            run: df . -h

          - name: Free disk space
            run: |
              sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
              sudo rm -rf \
                /usr/share/dotnet /usr/local/lib/android /opt/ghc \
                /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
                /usr/lib/jvm || true
              echo "some directories deleted"
              sudo apt install aptitude -y >/dev/null 2>&1
              sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
                esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
                google-cloud-sdk imagemagick \
                libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
                mercurial apt-transport-https mono-complete libmysqlclient \
                unixodbc-dev yarn chrpath libssl-dev libxft-dev \
                libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
                snmp pollinate libpq-dev postgresql-client powershell ruby-full \
                sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
                -y -f >/dev/null 2>&1
              sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
              sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
              sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
              sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
              sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
              sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
              sudo apt-get autoremove -y >/dev/null 2>&1
              sudo apt-get autoclean -y >/dev/null 2>&1
              echo "some packages purged"

          - name: Check disk space
            run: |
              sudo dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head
              df . -h
              sudo du /usr/ -hx -d 4 --threshold=1G | sort -hr | head

          - name: Checkout code
            uses: actions/checkout@v4

          - name: Read QT_VERSION from Dockerfile
            id: read-dockerfile
            run: |
              FILENAME=${{ matrix.qt-version }}-${{ matrix.target-os }}.Dockerfile
              if ! [ -e "$FILENAME" ]; then
                echo "$FILENAME does not exists"
                exit 1
              fi
              echo "::set-output name=qt-version::$(cat $FILENAME | grep -oP 'ARG QT_VERSION=[0-9.]+' | grep -oP '[0-9]\.[0-9]\.[0-9]')"

          - name: Login to DockerHub
            uses: docker/login-action@v3.4.0
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}
              logout: true

          - name: Login to GitHub Container Registry
            uses: docker/login-action@v3.4.0
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - name: Extract metadata (tags, labels) for Docker
            id: meta
            uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
            with:
              flavor: |
                suffix=.${{ matrix.qt-version }}-${{ matrix.target-os }}

              images: |
                ${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPOSITORY }}
                ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

          - if: ${{ matrix.target-os != 'android' }}
            name: Qt Sources Cache for Docker
            uses: actions/cache@v4
            with:
              path: qt-${{ matrix.qt-version }}-src
              key: qt-${{ steps.read-dockerfile.outputs.qt-version }}-src-cache

          - name: Inject Qt Sources Cache into Docker
            uses: reproducible-containers/buildkit-cache-dance@4b2444fec0c0fb9dbf175a96c094720a692ef810 # v2.1.4
            with:
              cache-source: qt-${{ matrix.qt-version }}-src

          - name: Build and push Docker image
            uses: docker/build-push-action@v6.15.0
            with:
              cache-from: type=gha
              cache-to: type=gha,mode=max
              context: .
              file: ./${{ matrix.qt-version }}-${{ matrix.target-os }}.Dockerfile
              push: ${{ github.event_name != 'pull_request' }}
              tags: ${{ steps.meta.outputs.tags }}
              labels: ${{ steps.meta.outputs.labels }}
